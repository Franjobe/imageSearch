 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/


'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var https = require("https");
var mongoose = require("mongoose");
var path = require ("path");
var Term = require ("./model/term.js");         // LOAD TERM SCHEMA



//////////////////////////////////////////////////////////

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

////////////////////////////////////////////////////////



// MIDDLEWARE
app.use('/public', express.static(process.cwd() + '/public'));


// CONNECT DB
mongoose.connect(process.env.MONGODB_URI,{})  //CONECTA LA DB a traés de la URI en .env | useMongoClient:true siempre va!!!
        .then(function(){console.log("DB connected")});


// FUNCTION HTTP REQUEST !
function httpRequest(params, postData) {
  
  return new Promise(function(resolve, reject) {
  
  // HTTP REQUEST TO GOOGLE API
  var req = https.request(params, function(res) {
      //console.log('statusCode:', res.statusCode);
      //console.log('headers:', res.headers);
      
            // reject on bad status
            if (res.statusCode < 200 || res.statusCode >= 300) {
                return reject(new Error('statusCode=' + res.statusCode));
            }
    
            // cumulate data
            var body = [];
    
            res.on('data', function(chunk) {
                  //process.stdout.write(chunk);
                  body.push(chunk);
            });
    
            // resolve on end
            res.on('end', function() {
                try {
                    body = JSON.parse(Buffer.concat(body).toString());
                  //console.log(body);
                } catch(e) {
                    reject(e);
                }
                resolve(body);
            });
   
   }); 

      // reject on request error
        req.on('error', function(err) {
            // This is not a "Second reject", just a different sort of failure
            reject(err);
        });
      
    
     if (postData) {
            req.write(postData);
        }
        // IMPORTANT
        req.end();
  
  });
 }; 


// ROUNTING

app.get("/search/:lookFor*/:page*", function(request, response){
 
 
  
  var lookFor = request.params.lookFor;
  var encode = encodeURI(lookFor);
  var page = request.params.page;
  
  
  console.log(page);
 
  // CREATE INSTANCE of Term model. 
    var date = new Date();
    var newTerm = new Term({term:lookFor, when: date});
  
  
  // SAVE INSTANCE IN DB
    newTerm.save().then(function(result){
                   
              console.log(result);
                   
              // handle err, se maneja al final x ser una promise.
              }, function(err){                       
                 console.log(err);
                 response.send("No lo pudimos guardar");
                 });

  
  
  // GET https://www.googleapis.com/customsearch/v1?key=INSERT_YOUR_API_KEY&cx=017576662512468239146:omuauf_lfve&q=lectures
  // example FCC      https://cryptic-ridge-9197.herokuapp.com/api/imagesearch/dogs%20funny?offset=10
  // other example:   https://image-seeker.glitch.me/  
  // params
  

  /// options
  
  // SEARCH VARIABLES
  var apiKey = "AIzaSyC6eIrszJ7mEEmJDvJRtaxm3sAahpuCif0"; //process.env.API_KEY;
  var searchID = "014651292311375850169:emak_chlc6w";     // equal to cx in google api
  var query =  encode;
  var searchType = "image";
  var num = 3;        // + "&num=" + num                        // results quantity
  var offset = page;

  var options = {
    hostname: 'www.googleapis.com',
    path: "/customsearch/v1?key=" + apiKey + "&cx=" + searchID + "&searchType=" + searchType + "&q=" + query  + "?offset=" + offset,
    method: 'GET'
  };  


  
  // this is a get, so there's no post data
httpRequest(options).then(function(body) {
  
var result = [];  
var items = body.items;
  
for (var i=0; i<items.length; i++){
   
   var obje = {
   url: items[i].link,
   snippet: items[i].snippet,
   thumbnail: items[i].image.thumbnailLink,
   context: items[i].image.contextLink
   }  
   
   result.push(obje);   
}; //cierra el loop
    
  response.send(result);   
}); //cierra el HTTP request.
  

}); //cierra el app.get

 



// GET ALL THE DATA
app.get("/history", function(req, res){
          Term.find({},{"_id" : false, "__v": false}, function(err, data){
          res.send(data);
          });
});









////////////////////////////////////////////////////////////
// OTHER DEFALUT ROUTING

app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })



// ????
app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  


// ERROR HANDLING

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})


// LISTENING
app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});


// DATAAAAAA

// link instructivo:                https://forum.freecodecamp.org/t/image-search-abstraction-layer-here-are-some-instructions-for-working-with-google-custom-search/115982
// config mi motor de busqeuda:     https://cse.google.com/cse/setup/basic?cx=014651292311375850169%3Aemak_chlc6w
// URL QUERI CONFIG:                https://developers.google.com/custom-search/json-api/v1/using_rest

// ID de motor de busqueda -cx:         014651292311375850169:emak_chlc6w
// API KEY (100 queries per day):   AIzaSyC6eIrszJ7mEEmJDvJRtaxm3sAahpuCif0
// AND… for this project:           you will want to filter the search to only images by adding the searchType parameter in the url set to image.




// example:         GET https://www.googleapis.com/customsearch/v1?key=INSERT_YOUR_API_KEY&cx=017576662512468239146:omuauf_lfve&q=lectures

// example FCC      https://cryptic-ridge-9197.herokuapp.com/api/imagesearch/dogs%20funny?offset=10
// other example:   https://image-seeker.glitch.me/

